stages {
    stage('Security scan with Safety') {
        steps {
            container('ubn22-python-tox') {
                script {
                    // Create virtual environment and install safety
                    sh '''
                        python3.9 -m venv virtualenv
                        source virtualenv/bin/activate
                        pip install safety
                    '''

                    // Run safety check and capture both output and exit code separately
                    def safetyOutput = sh(script: '''
                        ./virtualenv/bin/safety check -r requirements.txt
                    ''', returnStdout: true).trim()

                    def safetyStatus = sh(script: '''
                        ./virtualenv/bin/safety check -r requirements.txt
                    ''', returnStatus: true)

                    // Check the exit code and process the output only if needed
                    if (safetyStatus != 0) {
                        echo "Safety check found vulnerabilities. Processing the output..."
                        def failPipeline = false

                        // Regex to handle beta versions
                        def betaRegex = /[a-zA-Z0-9.]*b[a-zA-Z0-9]+/

                        // Parse the safety output line-by-line
                        safetyOutput.eachLine { line ->
                            if (line.contains("ADVISORY:")) {
                                // This is where the vulnerability resolution information is
                                def advisory = line.split(":")[1].trim()

                                // Check if the advisory mentions a beta version
                                if (advisory ==~ betaRegex) {
                                    echo "Vulnerability found with beta fix, ignoring: ${advisory}"
                                } else if (advisory.contains("rc") || !(advisory ==~ betaRegex)) {
                                    // Fail for stable or release candidate versions
                                    echo "Vulnerability found with stable or release candidate fix: ${advisory}"
                                    failPipeline = true
                                }
                            }
                        }

                        // Fail the pipeline if any stable or rc vulnerabilities were found
                        if (failPipeline) {
                            error "Pipeline failed due to vulnerabilities with stable or rc fixes available."
                        } else {
                            echo "No blocking vulnerabilities found. Proceeding with pipeline."
                        }
                    } else {
                        echo "No vulnerabilities found by safety check."
                    }
                }
            }
        }
    }
}
