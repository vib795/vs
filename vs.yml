stages {
    stage('Security scan with Safety') {
        steps {
            container('ubn22-python-tox') {
                script {
                    // Create virtual environment and install safety
                    sh '''
                        python3.9 -m venv virtualenv
                        source virtualenv/bin/activate
                        pip install safety
                    '''

                    // Run safety check, capture the output, and don't fail immediately
                    def safetyOutput = sh(script: '''
                        ./virtualenv/bin/safety check -r requirements.txt
                    ''', returnStdout: true).trim()

                    // Variable to track whether the pipeline should fail
                    def failPipeline = false

                    // Updated regex to match versions with any characters before and after 'b'
                    def betaRegex = /[a-zA-Z0-9.]*b[a-zA-Z0-9]+/

                    // Parse the output line-by-line
                    safetyOutput.eachLine { line ->
                        if (line.contains("ADVISORY:")) {
                            // This is where the vulnerability resolution information is
                            def advisory = line.split(":")[1].trim()

                            // Check if the advisory mentions a valid beta version
                            if (advisory ==~ betaRegex) {
                                echo "Vulnerability found with beta fix, ignoring: ${advisory}"
                            } else if (advisory.contains("rc") || !(advisory ==~ betaRegex)) {
                                // Fail for stable or release candidate versions
                                echo "Vulnerability found with stable or release candidate fix: ${advisory}"
                                failPipeline = true
                            }
                        }
                    }

                    // Fail the pipeline if any stable or rc vulnerabilities were found
                    if (failPipeline) {
                        error "Pipeline failed due to vulnerabilities with stable or rc fixes available."
                    } else {
                        echo "No blocking vulnerabilities found. Proceeding with pipeline."
                    }
                }
            }
        }
    }
}
