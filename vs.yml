stage('Security Scan') {
    steps {
        container('ubn22-python-tox') {
            script {
                // Create a temporary directory
                def tempDir = sh(script: 'mktemp -d', returnStdout: true).trim()
                
                try {
                    // Setup virtual environment and install safety in the temp directory
                    sh """
                        python3.9 -m venv ${tempDir}/venv
                        . ${tempDir}/venv/bin/activate
                        pip install safety
                    """

                    // Run safety check and capture output
                    def safetyOutput = sh(script: ". ${tempDir}/venv/bin/activate && safety check -r requirements.txt", returnStdout: true).trim()

                    // Process the safety output
                    def failPipeline = false
                    def betaRegEx = /[a-zA-Z0-9.]*b[a-zA-Z0-9.]*/

                    safetyOutput.split('\n').each { line ->
                        if (line.contains("ADVISORY:")) {
                            def advisory = line.split(":")[1].trim()

                            if (advisory =~ betaRegEx) {
                                echo "Vulnerability found with beta fix, ignoring: ${advisory}"
                            } else if (advisory.contains("rc") || !(advisory =~ betaRegEx)) {
                                echo "Vulnerability found with stable or release candidate fix: ${advisory}"
                                failPipeline = true
                            }
                        }
                    }

                    if (failPipeline) {
                        error "Pipeline failed due to vulnerability with stable or rc fixes available."
                    } else {
                        echo "No blocking vulnerabilities found. Proceeding with the pipeline."
                    }
                } finally {
                    // Clean up the temporary directory
                    sh "rm -rf ${tempDir}"
                }
            }
        }
    }
}
