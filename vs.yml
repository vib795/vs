stages {
    stage('Security scan with Safety') {
        steps {
            container('ubn22-python-tox') {
                script {
                    // Create virtual environment and install safety
                    sh '''
                        python3.9 -m venv virtualenv
                        source virtualenv/bin/activate
                        pip install safety
                    '''

                    // Run safety check and capture the console output in-memory
                    def safetyOutput = sh(script: '''
                        ./virtualenv/bin/safety check -r requirements.txt
                    ''', returnStdout: true).trim()

                    // Variable to track whether the pipeline should fail
                    def failPipeline = false

                    // Parse the safety output line-by-line
                    safetyOutput.eachLine { line ->
                        if (line.contains("Vulnerability found")) {
                            // Identify if the resolution is a beta version ('b')
                            if (line.contains("b")) {
                                echo "Vulnerability found with beta fix, ignoring: ${line}"
                            } else if (line.contains("rc") || !line.contains("b")) {
                                // Fail for stable or release candidate versions
                                echo "Vulnerability found with stable or release candidate fix: ${line}"
                                failPipeline = true
                            }
                        }
                    }

                    // Fail the pipeline if there are any stable or release candidate fixes
                    if (failPipeline) {
                        error "Pipeline failed due to vulnerabilities with stable or rc fixes."
                    } else {
                        echo "No blocking vulnerabilities found. Proceeding with pipeline."
                    }
                }
            }
        }
    }
}
